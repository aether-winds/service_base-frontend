import { Application, Request } from 'express';
import { Socket } from 'node:net';
import { stub } from 'sinon';

class RequestOptions implements Request {
  public aborted = false;
  public accepted = [];;
  public app = {} as Application;
  public baseUrl = '';
  public body = {};
  public closed = false;
  public complete = false;
  public connection = {} as Socket;
  public cookies = {};
  public destroyed = false;
  public errored = null;
  public fresh = true;
  public headers = {};
  public headersDistinct = {};
  public host = '';
  public hostname = '';
  public httpVersion = '';
  public httpVersionMajor = 0;
  public httpVersionMinor = 0;
  public ip = '';
  public ips = [];
  public method = 'GET';
  public originalUrl = '';
  public params = {};
  public path = '';
  public protocol = 'https';
  public query = {};
  public rawHeaders = [];
  public rawTrailers = [];
  public readable = true;
  public readableAborted = false;
  public readableDidRead = false;
  public readableEncoding = null;
  public readableEnded = false;
  public readableFlowing = false;
  public readableHighWaterMark = 0;
  public readableLength = 0;
  public readableObjectMode = false;
  public route = {};
  public secure = true;
  public signedCookies = {};
  public socket = {} as Socket;
  public stale = false;
  public subdomains = [];
  public trailers = {};
  public trailersDistinct = {};
  public url = '';
  public xhr = true;
  
  public _destroy = stub();
  public _read = stub();
  public accepts = stub();
  public acceptsCharsets = stub();
  public acceptsEncodings = stub();
  public acceptsLanguages = stub();
  public addListener = stub();
  public asIndexedPairs = stub();
  public compose = stub();
  public destroy = stub();
  public drop = stub();
  public emit = stub();
  public eventNames = stub();
  public every = stub();
  public filter = stub();
  public find = stub();
  public flatMap = stub();
  public forEach = stub();
  public get = stub();
  public getMaxListeners = stub();
  public header = stub();
  public iterator = stub();
  public is = stub();
  public isPaused = stub();
  public listenerCount = stub();
  public listeners = stub();
  public map = stub();
  public off = stub();
  public on = stub();
  public once = stub();
  public pause = stub();
  public pipe = stub();
  public prependListener = stub();
  public prependOnceListener = stub();
  public push = stub();
  public range = stub();
  public rawListeners = stub();
  public read = stub();
  public reduce = stub();
  public removeListener = stub();
  public removeAllListeners = stub();
  public resume = stub();
  public setEncoding = stub();
  public setMaxListeners = stub();
  public setTimeout = stub();
  public some = stub();
  public take = stub();
  public toArray = stub();
  public unpipe = stub();
  public unshift = stub();
  public wrap = stub();

  public [Symbol.asyncDispose] = stub();
  public [Symbol.asyncIterator] = stub();
}

export const MockRequest = (overrides: Partial<RequestOptions> = {}): Request => ({
  ...new RequestOptions(),
  ...overrides,
});
